// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pkg/album/album.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlbumServiceClient is the client API for AlbumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumServiceClient interface {
	FindOne(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	FindByMusician(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*FindAllResponse, error)
	CreateAlbum(ctx context.Context, in *AlbumData, opts ...grpc.CallOption) (*BasicResponse, error)
	Update(ctx context.Context, in *AlbumData, opts ...grpc.CallOption) (*BasicResponse, error)
	Delete(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	SearchAlbum(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*FindAllResponse, error)
}

type albumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumServiceClient(cc grpc.ClientConnInterface) AlbumServiceClient {
	return &albumServiceClient{cc}
}

func (c *albumServiceClient) FindOne(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumService/FindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) FindByMusician(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*FindAllResponse, error) {
	out := new(FindAllResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumService/FindByMusician", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) CreateAlbum(ctx context.Context, in *AlbumData, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumService/CreateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Update(ctx context.Context, in *AlbumData, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Delete(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) SearchAlbum(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*FindAllResponse, error) {
	out := new(FindAllResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumService/SearchAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServiceServer is the server API for AlbumService service.
// All implementations must embed UnimplementedAlbumServiceServer
// for forward compatibility
type AlbumServiceServer interface {
	FindOne(context.Context, *IDRequest) (*BasicResponse, error)
	FindByMusician(context.Context, *IDRequest) (*FindAllResponse, error)
	CreateAlbum(context.Context, *AlbumData) (*BasicResponse, error)
	Update(context.Context, *AlbumData) (*BasicResponse, error)
	Delete(context.Context, *IDRequest) (*BasicResponse, error)
	SearchAlbum(context.Context, *SearchRequest) (*FindAllResponse, error)
	mustEmbedUnimplementedAlbumServiceServer()
}

// UnimplementedAlbumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumServiceServer struct {
}

func (UnimplementedAlbumServiceServer) FindOne(context.Context, *IDRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedAlbumServiceServer) FindByMusician(context.Context, *IDRequest) (*FindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByMusician not implemented")
}
func (UnimplementedAlbumServiceServer) CreateAlbum(context.Context, *AlbumData) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedAlbumServiceServer) Update(context.Context, *AlbumData) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAlbumServiceServer) Delete(context.Context, *IDRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAlbumServiceServer) SearchAlbum(context.Context, *SearchRequest) (*FindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAlbum not implemented")
}
func (UnimplementedAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {}

// UnsafeAlbumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumServiceServer will
// result in compilation errors.
type UnsafeAlbumServiceServer interface {
	mustEmbedUnimplementedAlbumServiceServer()
}

func RegisterAlbumServiceServer(s grpc.ServiceRegistrar, srv AlbumServiceServer) {
	s.RegisterService(&AlbumService_ServiceDesc, srv)
}

func _AlbumService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/FindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).FindOne(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_FindByMusician_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).FindByMusician(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/FindByMusician",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).FindByMusician(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/CreateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).CreateAlbum(ctx, req.(*AlbumData))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Update(ctx, req.(*AlbumData))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Delete(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_SearchAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).SearchAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/SearchAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).SearchAlbum(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumService_ServiceDesc is the grpc.ServiceDesc for AlbumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "album.AlbumService",
	HandlerType: (*AlbumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOne",
			Handler:    _AlbumService_FindOne_Handler,
		},
		{
			MethodName: "FindByMusician",
			Handler:    _AlbumService_FindByMusician_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _AlbumService_CreateAlbum_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AlbumService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AlbumService_Delete_Handler,
		},
		{
			MethodName: "SearchAlbum",
			Handler:    _AlbumService_SearchAlbum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/album/album.proto",
}
