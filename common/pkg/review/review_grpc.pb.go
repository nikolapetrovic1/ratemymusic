// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pkg/review/review.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewServiceClient interface {
	FindByUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	FindBySong(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	FindByAlbum(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	FindByUserSong(ctx context.Context, in *UserSongRequest, opts ...grpc.CallOption) (*ReviewData, error)
	FindByUserAlbum(ctx context.Context, in *UserAlbumRequest, opts ...grpc.CallOption) (*ReviewData, error)
	CreateReview(ctx context.Context, in *ReviewData, opts ...grpc.CallOption) (*ReviewData, error)
	Update(ctx context.Context, in *ReviewData, opts ...grpc.CallOption) (*ReviewData, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReviewData, error)
}

type reviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiceClient(cc grpc.ClientConnInterface) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) FindByUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := c.cc.Invoke(ctx, "/review.ReviewService/FindByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) FindBySong(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := c.cc.Invoke(ctx, "/review.ReviewService/FindBySong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) FindByAlbum(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := c.cc.Invoke(ctx, "/review.ReviewService/FindByAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) FindByUserSong(ctx context.Context, in *UserSongRequest, opts ...grpc.CallOption) (*ReviewData, error) {
	out := new(ReviewData)
	err := c.cc.Invoke(ctx, "/review.ReviewService/FindByUserSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) FindByUserAlbum(ctx context.Context, in *UserAlbumRequest, opts ...grpc.CallOption) (*ReviewData, error) {
	out := new(ReviewData)
	err := c.cc.Invoke(ctx, "/review.ReviewService/FindByUserAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) CreateReview(ctx context.Context, in *ReviewData, opts ...grpc.CallOption) (*ReviewData, error) {
	out := new(ReviewData)
	err := c.cc.Invoke(ctx, "/review.ReviewService/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) Update(ctx context.Context, in *ReviewData, opts ...grpc.CallOption) (*ReviewData, error) {
	out := new(ReviewData)
	err := c.cc.Invoke(ctx, "/review.ReviewService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReviewData, error) {
	out := new(ReviewData)
	err := c.cc.Invoke(ctx, "/review.ReviewService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServiceServer is the server API for ReviewService service.
// All implementations must embed UnimplementedReviewServiceServer
// for forward compatibility
type ReviewServiceServer interface {
	FindByUser(context.Context, *IdRequest) (*ReviewResponse, error)
	FindBySong(context.Context, *IdRequest) (*ReviewResponse, error)
	FindByAlbum(context.Context, *IdRequest) (*ReviewResponse, error)
	FindByUserSong(context.Context, *UserSongRequest) (*ReviewData, error)
	FindByUserAlbum(context.Context, *UserAlbumRequest) (*ReviewData, error)
	CreateReview(context.Context, *ReviewData) (*ReviewData, error)
	Update(context.Context, *ReviewData) (*ReviewData, error)
	Delete(context.Context, *IdRequest) (*ReviewData, error)
	mustEmbedUnimplementedReviewServiceServer()
}

// UnimplementedReviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewServiceServer struct {
}

func (UnimplementedReviewServiceServer) FindByUser(context.Context, *IdRequest) (*ReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUser not implemented")
}
func (UnimplementedReviewServiceServer) FindBySong(context.Context, *IdRequest) (*ReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBySong not implemented")
}
func (UnimplementedReviewServiceServer) FindByAlbum(context.Context, *IdRequest) (*ReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByAlbum not implemented")
}
func (UnimplementedReviewServiceServer) FindByUserSong(context.Context, *UserSongRequest) (*ReviewData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUserSong not implemented")
}
func (UnimplementedReviewServiceServer) FindByUserAlbum(context.Context, *UserAlbumRequest) (*ReviewData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUserAlbum not implemented")
}
func (UnimplementedReviewServiceServer) CreateReview(context.Context, *ReviewData) (*ReviewData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedReviewServiceServer) Update(context.Context, *ReviewData) (*ReviewData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReviewServiceServer) Delete(context.Context, *IdRequest) (*ReviewData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReviewServiceServer) mustEmbedUnimplementedReviewServiceServer() {}

// UnsafeReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServiceServer will
// result in compilation errors.
type UnsafeReviewServiceServer interface {
	mustEmbedUnimplementedReviewServiceServer()
}

func RegisterReviewServiceServer(s grpc.ServiceRegistrar, srv ReviewServiceServer) {
	s.RegisterService(&ReviewService_ServiceDesc, srv)
}

func _ReviewService_FindByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).FindByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/FindByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).FindByUser(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_FindBySong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).FindBySong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/FindBySong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).FindBySong(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_FindByAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).FindByAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/FindByAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).FindByAlbum(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_FindByUserSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).FindByUserSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/FindByUserSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).FindByUserSong(ctx, req.(*UserSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_FindByUserAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).FindByUserAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/FindByUserAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).FindByUserAlbum(ctx, req.(*UserAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).CreateReview(ctx, req.(*ReviewData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).Update(ctx, req.(*ReviewData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewService_ServiceDesc is the grpc.ServiceDesc for ReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "review.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindByUser",
			Handler:    _ReviewService_FindByUser_Handler,
		},
		{
			MethodName: "FindBySong",
			Handler:    _ReviewService_FindBySong_Handler,
		},
		{
			MethodName: "FindByAlbum",
			Handler:    _ReviewService_FindByAlbum_Handler,
		},
		{
			MethodName: "FindByUserSong",
			Handler:    _ReviewService_FindByUserSong_Handler,
		},
		{
			MethodName: "FindByUserAlbum",
			Handler:    _ReviewService_FindByUserAlbum_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _ReviewService_CreateReview_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReviewService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ReviewService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/review/review.proto",
}
