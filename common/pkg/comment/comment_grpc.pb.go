// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pkg/comment/comment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentsClient is the client API for Comments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsClient interface {
	CreateComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	UpdateComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	ReportComment(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	DeleteComment(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	GetByReview(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*AllCommentsResponse, error)
	GetAllByReportCount(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*AllCommentsResponse, error)
	GetByUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*AllCommentsResponse, error)
}

type commentsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentsClient(cc grpc.ClientConnInterface) CommentsClient {
	return &commentsClient{cc}
}

func (c *commentsClient) CreateComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/comment.Comments/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) UpdateComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/comment.Comments/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) ReportComment(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/comment.Comments/ReportComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) DeleteComment(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/comment.Comments/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) GetByReview(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*AllCommentsResponse, error) {
	out := new(AllCommentsResponse)
	err := c.cc.Invoke(ctx, "/comment.Comments/GetByReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) GetAllByReportCount(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*AllCommentsResponse, error) {
	out := new(AllCommentsResponse)
	err := c.cc.Invoke(ctx, "/comment.Comments/GetAllByReportCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsClient) GetByUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*AllCommentsResponse, error) {
	out := new(AllCommentsResponse)
	err := c.cc.Invoke(ctx, "/comment.Comments/GetByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsServer is the server API for Comments service.
// All implementations must embed UnimplementedCommentsServer
// for forward compatibility
type CommentsServer interface {
	CreateComment(context.Context, *CommentRequest) (*CommentResponse, error)
	UpdateComment(context.Context, *CommentRequest) (*CommentResponse, error)
	ReportComment(context.Context, *ReportRequest) (*CommentResponse, error)
	DeleteComment(context.Context, *IdRequest) (*CommentResponse, error)
	GetByReview(context.Context, *IdRequest) (*AllCommentsResponse, error)
	GetAllByReportCount(context.Context, *IdRequest) (*AllCommentsResponse, error)
	GetByUser(context.Context, *IdRequest) (*AllCommentsResponse, error)
	mustEmbedUnimplementedCommentsServer()
}

// UnimplementedCommentsServer must be embedded to have forward compatible implementations.
type UnimplementedCommentsServer struct {
}

func (UnimplementedCommentsServer) CreateComment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentsServer) UpdateComment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentsServer) ReportComment(context.Context, *ReportRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportComment not implemented")
}
func (UnimplementedCommentsServer) DeleteComment(context.Context, *IdRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentsServer) GetByReview(context.Context, *IdRequest) (*AllCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByReview not implemented")
}
func (UnimplementedCommentsServer) GetAllByReportCount(context.Context, *IdRequest) (*AllCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByReportCount not implemented")
}
func (UnimplementedCommentsServer) GetByUser(context.Context, *IdRequest) (*AllCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUser not implemented")
}
func (UnimplementedCommentsServer) mustEmbedUnimplementedCommentsServer() {}

// UnsafeCommentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsServer will
// result in compilation errors.
type UnsafeCommentsServer interface {
	mustEmbedUnimplementedCommentsServer()
}

func RegisterCommentsServer(s grpc.ServiceRegistrar, srv CommentsServer) {
	s.RegisterService(&Comments_ServiceDesc, srv)
}

func _Comments_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comments/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).CreateComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comments/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).UpdateComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_ReportComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).ReportComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comments/ReportComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).ReportComment(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comments/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).DeleteComment(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_GetByReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).GetByReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comments/GetByReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).GetByReview(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_GetAllByReportCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).GetAllByReportCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comments/GetAllByReportCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).GetAllByReportCount(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comments_GetByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServer).GetByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.Comments/GetByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServer).GetByUser(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Comments_ServiceDesc is the grpc.ServiceDesc for Comments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.Comments",
	HandlerType: (*CommentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _Comments_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _Comments_UpdateComment_Handler,
		},
		{
			MethodName: "ReportComment",
			Handler:    _Comments_ReportComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Comments_DeleteComment_Handler,
		},
		{
			MethodName: "GetByReview",
			Handler:    _Comments_GetByReview_Handler,
		},
		{
			MethodName: "GetAllByReportCount",
			Handler:    _Comments_GetAllByReportCount_Handler,
		},
		{
			MethodName: "GetByUser",
			Handler:    _Comments_GetByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/comment/comment.proto",
}
